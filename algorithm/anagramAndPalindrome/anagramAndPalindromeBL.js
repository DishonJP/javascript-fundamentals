/**
 * @module(number)n - generated from for loop
 */
const access = require('/home/admin1/Dishon/javascript-fundamentals/algorithm/anagram/anagramBL');
exports.toFindPrimeNumber = (n) => {
    try {
        let i = 2;
        while (i <= n / 2) {
            if (n % i === 0) { // to find prime no
                return false;
            }
            i++;
        }
        return true;
    } catch (error) {
        console.log(error);

    }
}
/**
 * @module(number)n - prime no
 */
exports.toFindPalindrome = (n) => {
    try {
        let holder = n;
        let value = 0;
        while (n !== 0) {
            let i = Math.floor(n % 10); //to get last digit of n
            n = Math.floor(n / 10); //to remove last digit of n
            value = Math.floor(value * 10 + i); //to move last digit to first
        }
        if (value === holder) { // to check whether given two number are palindrome
            return true;
        } else {
            return false;
        }
    } catch (error) {
        console.log(error);

    }
}
/**
 * @module(number)n - prime no
 */
exports.toFindAnagram = (n) => {
    try {
        for (let i = 2; i <= 1000; i++) {
            let toFindAnagram = this.toFindPrimeNumber(i); //to get prime no
            if (toFindAnagram) {
                if (i !== n) // to remove same number generated by 2 loops
                {
                    let number1 = n.toString(); //converting number to String
                    let number2 = i.toString();
                    let anagram = access.toCheckAnagram(number1, number2); //calling function to check anagram
                    if (anagram) {
                        console.log(i + ' and ' + n + ' are anagram');
                    }
                }
            }
        }
    } catch (error) {
        console.log(error);

    }
}